"use strict";

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.function.name");

require("core-js/modules/es7.object.values");

require("core-js/modules/es6.promise");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var through2 = require("through2"),
    clone = require("clone"),
    mergeDefaults = require("merge-defaults"),
    configDefaults = require("require-directory")(module, "config"),
    helpers = require("./helpers.js"),
    path = require("path"),
    toIco = require("to-ico");

(function () {
  "use strict";

  function favicons(source, parameters, next) {
    if (next) {
      return favicons(source, parameters).then(function (response) {
        return next(null, response);
      }).catch(next);
    }

    var config = clone(configDefaults),
        options = mergeDefaults(parameters || {}, config.defaults),
        µ = helpers(options);

    function createFavicon(sourceset, properties, name, platformOptions) {
      if (path.extname(name) === ".ico") {
        return Promise.all(properties.sizes.map(function (_ref) {
          var width = _ref.width,
              height = _ref.height;
          return createFavicon(sourceset, Object.assign({}, properties, {
            width,
            height
          }), `${width}x${height}.png`, platformOptions);
        })).then(function (results) {
          return toIco(results.map(function (_ref2) {
            var contents = _ref2.contents;
            return contents;
          })).then(function (buffer) {
            return {
              name,
              contents: buffer
            };
          });
        });
      }

      var maximum = Math.max(properties.width, properties.height),
          offset = Math.round(maximum / 100 * platformOptions.offset) || 0,
          background = µ.General.background(platformOptions.background);

      if (platformOptions.disableTransparency) {
        properties.transparent = false;
      }

      return Promise.all([µ.Images.create(properties, background), µ.Images.render(sourceset, properties, offset)]).then(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            canvas = _ref4[0],
            buffer = _ref4[1];

        return µ.Images.composite(canvas, buffer, properties, offset, maximum);
      }).then(function (contents) {
        return {
          name,
          contents
        };
      });
    }

    function createHTML(platform) {
      return Promise.all(Object.values(config.html[platform] || {}).map(µ.HTML.parse));
    }

    function createFiles(platform, platformOptions) {
      return Promise.all(Object.keys(config.files[platform] || {}).map(function (name) {
        return µ.Files.create(config.files[platform][name], name, platformOptions);
      }));
    }

    function createFavicons(sourceset, platform, platformOptions) {
      return Promise.all(Object.keys(config.icons[platform] || {}).map(function (name) {
        return createFavicon(sourceset, config.icons[platform][name], name, platformOptions);
      }));
    }

    function createPlatform(sourceset, platform, platformOptions) {
      return Promise.all([createFavicons(sourceset, platform, platformOptions), createFiles(platform, platformOptions), createHTML(platform)]);
    }

    function create(_x) {
      return _create.apply(this, arguments);
    }

    function _create() {
      _create = _asyncToGenerator(function* (sourceset) {
        var _ref5, _ref6, _ref7;

        var responses = [];
        var platforms = Object.keys(options.icons).filter(function (platform) {
          return options.icons[platform];
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = platforms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _platform = _step.value;
            responses.push((yield createPlatform(sourceset, _platform, µ.General.preparePlatformOptions(_platform, options.icons[_platform], options))));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return {
          images: (_ref5 = []).concat.apply(_ref5, _toConsumableArray(responses.map(function (r) {
            return r[0];
          }))),
          files: (_ref6 = []).concat.apply(_ref6, _toConsumableArray(responses.map(function (r) {
            return r[1];
          }))),
          html: (_ref7 = []).concat.apply(_ref7, _toConsumableArray(responses.map(function (r) {
            return r[2];
          }))).sort()
        };
      });
      return _create.apply(this, arguments);
    }

    var result = µ.General.source(source).then(create);
    return options.pipeHTML ? result.then(function (response) {
      return µ.Files.create(response.html, options.html, false).then(function (file) {
        return Object.assign(response, {
          files: _toConsumableArray(response.files).concat([file])
        });
      });
    }) : result;
  }

  function stream(params, handleHtml) {
    var µ = helpers(params);
    /* eslint func-names: 0, no-invalid-this: 0 */

    return through2.obj(function (file, encoding, callback) {
      var _this = this;

      if (file.isNull()) {
        return callback(null, file);
      }

      if (file.isStream()) {
        return callback(new Error("Streaming not supported"));
      }

      favicons(file.contents, params).then(function (_ref8) {
        var images = _ref8.images,
            files = _ref8.files,
            html = _ref8.html;

        var _arr2 = _toConsumableArray(images).concat(_toConsumableArray(files));

        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
          var asset = _arr2[_i2];

          _this.push(µ.General.vinyl(asset, file));
        }

        if (handleHtml) {
          handleHtml(html);
        }

        callback(null);
      }).catch(callback);
    });
  }

  module.exports = favicons;
  module.exports.config = configDefaults;
  module.exports.stream = stream;
})();